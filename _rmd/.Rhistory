# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
knitr::render_jekyll()
knitr::knit(inputfile, output)
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'First-Use-RMarkdown.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'First-Use-RMarkdown.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'First-Use-RMarkdown.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'First-Use-RMarkdown.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'First-Use-RMarkdown.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'First-Use-RMarkdown.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'First-Use-RMarkdown.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
library(quantmod)
getSymbols('GS', warnings = FALSE, quiet=TRUE)
GS
GS['2014-01-01/']
chartSeries(GS['2014-01-01/'])
GS <- GS['2014-01-01/']
chartSeries(GS)
?Locale
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'First-Use-RMarkdown.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'First-Use-RMarkdown.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'First-Use-RMarkdown.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'First-Use-RMarkdown.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'First-Use-RMarkdown.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
docx.file <- 'D:/Dropbox/R/Projects/Blogpost/template1.docx'
library(ReporteRs)
doc <- docx(docx.file) # 文件名在不可见的R区块中给出
styles(doc)
doc
doc <- docx(file=docx.file) # 文件名在不可见的R区块中给出
doc <- docx(template=docx.file) # 文件名在不可见的R区块中给出
styles(doc)
styles(doc)
doc <- docx(template=docx.file) # 文件名在不可见的R区块中给出
styles(doc)
docx.file <- 'D:/Dropbox/R/Projects/Blogpost/template2.docx'
doc <- docx(template=docx.file) # 文件名在不可见的R区块中给出
styles(doc)
docx.file <- 'D:/Dropbox/R/Projects/Blogpost/template1.docx'
doc <- docx(template=docx.file) # 文件名在不可见的R区块中给出
styles(doc)
a <- styles(doc)
length(a)
docx.file <- 'D:/Dropbox/R/Projects/Blogpost/template2.docx'
doc <- docx(template=docx.file) # 文件名在不可见的R区块中给出
styles(doc)
docx.file <- 'D:/Dropbox/R/Projects/Blogpost/template1.docx'
doc <- docx(template=docx.file) # 文件名在不可见的R区块中给出
styles(doc)
doc = declareTitlesStyles(doc,
stylenames = c("1", "2", "3", "4", "5",
"6", "7", "8", "9" ) )
doc = declareTitlesStyles(doc,
stylenames = c("1", "2", "3", "4", "5") )
sty_list <- styles(doc)
par_list <- paste("这一段的样式名称是：", sty_list)
par_list
for (i in 1:length(sty_list)) {
doc <- addParagraph(doc, value=par_list[i], stylename=sty_list[i])
}
writeDoc(doc, file=ouput) # output文件名在不可见的R区块中给出
options('ReporteRs-default-font'='Arial')
for (i in 1:length(sty_list)) {
doc <- addParagraph(doc, value=par_list[i], stylename=sty_list[i])
}
writeDoc(doc, file=ouput) # output文件名在不可见的R区块中给出
output <- 'D:/Dropbox/R/Projects/Blogpost/test1.docx'
writeDoc(doc, file=ouput) # output文件名在不可见的R区块中给出
writeDoc(doc, file=output) # output文件名在不可见的R区块中给出
inputfile <- 'ReporteRs-and-Chinese-docx.Rmd'
date <- '2014-04-14'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output)
knit(inputfile, output, encoding = 'utf-8')
inputfile <- 'ReporteRs-and-Chinese-docx.Rmd'
date <- '2014-04-29'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output, encoding = 'utf-8')
getOption('width')
# 调整工作目录至Github目录，即现有的工作目录向上走两层
# Project默认工作目录应为“Dropbox/windows folders sync/Documents/GitHub/jekyll/_rmd”
# if (length(grep('_rmd$', getwd()))) setwd('..')
# if (length(grep('jekyll$', getwd()))) setwd('..')
# if (length(grep('GitHub$', getwd()))) cat('Reached GitHub Folder!')
# 将Rmd文件knit为md文件，需要输入的是Rmd文件名和日期date
inputfile <- 'ReporteRs-and-Chinese-docx.Rmd'
date <- '2014-04-29'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output, encoding = 'utf-8')
inputfile <- 'ReporteRs-and-Chinese-docx.Rmd'
date <- '2014-04-29'
# inputdir <- 'jekyll/_rmd/'
# outputdir <- 'jekyll/_posts/'
# input <- paste(inputdir, inputfile, sep='')
# output <- paste(outputdir, date, '-', inputfile, sep='')
# output <- gsub('.Rmd', '.md', output)
output <- paste('../_posts/', date, '-', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(inputfile, output, encoding = 'utf-8')
inputfile <- '2014-04-29-ReporteRs-and-Chinese-docx.Rmd'
output <- paste('../_posts/', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
inputfile
output
# 目前使用以下代码knit ####
input <- '2014-04-29-ReporteRs-and-Chinese-docx.Rmd'
output <- paste('../_posts/', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
# 目前使用以下代码knit ####
input <- '2014-04-29-ReporteRs-and-Chinese-docx.Rmd'
output <- paste('../_posts/', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
Sys.info()
# 目前使用以下代码knit ####
input <- '2014-04-29-ReporteRs-and-Chinese-docx.Rmd'
output <- paste('../_posts/', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
library(ReporteRs)
options(width=60)
docx.file <- 'D:/Dropbox/R/Projects/Blogpost/template1.docx'
output <- 'D:/Dropbox/R/Projects/Blogpost/test1.docx'
if (Sys.info()['sysname']=='Darwin') {
docx.file <- '~/Dropbox/R/Projects/Blogpost/template1.docx'
output <- '~/Dropbox/R/Projects/Blogpost/test1.docx'
}
docx.file
output
doc <- docx(template=docx.file) # 文件名在不可见R区块中给出
file.exists(docx.file)
doc <- docx(template=docx.file) # 文件名在不可见R区块中给出
# 目前使用以下代码knit ####
input <- '2014-04-29-ReporteRs-and-Chinese-docx.Rmd'
output <- paste('../_posts/', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
docx.file
doc <- docx(template=docx.file) # 文件名在不可见R区块中给出
doc <- docx(template='template1.docx') # 文件名在不可见R区块中给出
docx.file <- '/Users/baixueyuan/Dropbox/R/Projects/Blogpost/template1.docx'
doc <- docx(template=docx.file) # 文件名在不可见R区块中给出
# 目前使用以下代码knit ####
input <- '2014-04-29-ReporteRs-and-Chinese-docx.Rmd'
output <- paste('../_posts/', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
# 目前使用以下代码knit ####
input <- '2014-05-08-ReporteRs-Update.Rmd'
output <- paste('../_posts/', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
library(ReporteRs)
# 目前使用以下代码knit ####
input <- '2014-05-08-ReporteRs-Update.Rmd'
output <- paste('../_posts/', inputfile, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
output
# 目前使用以下代码knit ####
input <- '2014-05-08-ReporteRs-Update.Rmd'
output <- paste('../_posts/', input, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
install.packages("Defaults")
# 目前使用以下代码knit ####
input <- '2014-05-08-ReporteRs-Update.Rmd'
output <- paste('../_posts/', input, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
install.packages("Quandl")
library("xts", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:xts", unload=TRUE)
detach("package:zoo", unload=TRUE)
install.packages("xts")
install.packages("~/Downloads/Quandl_2.3.2.tgz", repos = NULL)
rm(list=ls())
# 目前使用以下代码knit ####
input <- '2014-05-08-ReporteRs-Update.Rmd'
output <- paste('../_posts/', input, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
install.packages("~/Downloads/TTR_0.22-0.tgz", repos = NULL)
install.packages("~/Downloads/quantmod_0.4-0.tgz", repos = NULL)
# 目前使用以下代码knit ####
input <- '2014-05-08-ReporteRs-Update.Rmd'
output <- paste('../_posts/', input, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
library("TTR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("TTR")
# 目前使用以下代码knit ####
input <- '2014-05-08-ReporteRs-Update.Rmd'
output <- paste('../_posts/', input, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
# 目前使用以下代码knit ####
input <- '2014-05-08-ReporteRs-Update.Rmd'
output <- paste('../_posts/', input, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
# 目前使用以下代码knit ####
input <- '2014-05-08-ReporteRs-Update.Rmd'
output <- paste('../_posts/', input, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
# 目前使用以下代码knit ####
input <- '2014-05-08-ReporteRs-Update.Rmd'
output <- paste('../_posts/', input, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
render_jekyll()
knit(input, output, encoding = 'utf-8')
# 目前使用以下代码knit ####
input <- '2014-05-08-ReporteRs-Update.Rmd'
output <- paste('../_posts/', input, sep='')
output <- gsub('.Rmd', '.md', output)
# knitting，首先运行render_jekyll以保证knit会使用jekyll的Liquid引擎
library(knitr)
opts_knit$set(width=60)
render_jekyll()
knit(input, output, encoding = 'utf-8')
